"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ResizeHandlers = void 0; // @ts-ignore

var Vue = require("vue");

var allVue = Vue;
var gh = allVue.h;

var kendo_vue_common_1 = require("@progress/kendo-vue-common");
/**
 * @hidden
 */


var keys = ['n', 'e', 's', 'w', 'se', 'sw', 'ne', 'nw'];
/**
 * Represents the default `ResizeHandlers` component.
 */

var ResizeHandlers = {
  name: 'ResizeHandlers',
  // @ts-ignore
  emits: {
    'resize': null
  },
  // @ts-ignore
  setup: !gh ? undefined : function () {
    var v3 = !!gh;
    return {
      v3: v3
    };
  },
  methods: {
    onDrag: function onDrag(event, key) {
      event.originalEvent.preventDefault();
      this.$emit('resize', event, {
        end: false,
        direction: key
      });
    },
    onRelease: function onRelease(event, key) {
      event.originalEvent.preventDefault();
      this.$emit('resize', event, {
        end: true,
        direction: key
      });
    }
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    return h("div", [keys.map(function (key, index) {
      var _this = this;

      return (// @ts-ignore  function children
        h(kendo_vue_common_1.Draggable, {
          key: index,
          onDrag: function onDrag(e) {
            return _this.onDrag(e, key);
          },
          on: this.v3 ? undefined : {
            "drag": function onDrag(e) {
              return _this.onDrag(e, key);
            },
            "release": function release(e) {
              return _this.onRelease(e, key);
            }
          },
          onRelease: function release(e) {
            return _this.onRelease(e, key);
          }
        }, this.v3 ? function () {
          return [h("div", {
            "class": 'k-resize-handle k-resize-' + key,
            style: {
              display: 'block',
              touchAction: 'none'
            }
          })];
        } : [h("div", {
          "class": 'k-resize-handle k-resize-' + key,
          style: {
            display: 'block',
            touchAction: 'none'
          }
        })])
      );
    }, this)]);
  }
};
exports.ResizeHandlers = ResizeHandlers;