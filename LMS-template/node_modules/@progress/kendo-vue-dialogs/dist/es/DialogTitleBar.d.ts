import { RecordPropsDefinition, ComponentOptions } from 'vue/types/options';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
import { VNode } from 'vue';
/**
 * @hidden
 */
export interface DialogTitleBarProps {
    /**
     * @hidden
     */
    onCloseButtonClick?: (event: any) => void;
    /**
     * @hidden
     */
    id?: string;
    /**
     * @hidden
     */
    closeIcon?: boolean;
    /**
     * Sets the title of the Dialog .
     *  If `title` of 'titleRender' is not specified, the Dialog does not render a **Close** button.
     */
    title?: string | any;
    /**
     * Defines the custom rendering of the title. Accepts a Vue component, a `render` function, or a slot name.
     */
    titleRender?: ((h: any, defaultRendering: VNode | null, props: any, listeners: any) => VNode) | string | any;
}
/**
 * @hidden
 */
export interface DialogTitleBarMethods extends Vue {
    onCloseButtonClick: (event: any) => void;
}
/**
 * Represents the default `DialogTitleBar` component.
 */
declare let DialogTitleBar: ComponentOptions<Vue, DefaultData<{}>, DefaultMethods<DialogTitleBarMethods>, {}, RecordPropsDefinition<DialogTitleBarProps>>;
export { DialogTitleBar };
