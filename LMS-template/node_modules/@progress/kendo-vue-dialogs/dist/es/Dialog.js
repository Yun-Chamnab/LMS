// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
import { DialogTitleBar } from './DialogTitleBar';
import { guid, Keys, templateRendering, hasListener, getListeners, getDefaultSlots } from '@progress/kendo-vue-common';
import { validatePackage } from '@progress/kendo-licensing';
import { packageMetadata } from './package-metadata';
/**
 * Represents the default `Dialog` component.
 */

var Dialog = {
  name: 'KendoDialog',
  props: {
    title: String,
    titleRender: [String, Function, Object],
    id: String,
    dir: String,
    closeIcon: {
      type: Boolean,
      default: true
    },
    width: [String, Number],
    height: [String, Number],
    minWidth: [String, Number]
  },
  created: function created() {
    validatePackage(packageMetadata);
    this.titleId = this.generateTitleId();
  },
  // @ts-ignore
  setup: !gh ? undefined : function () {
    var v3 = !!gh;
    return {
      v3: v3
    };
  },
  methods: {
    handleCloseDialog: function handleCloseDialog(event) {
      event.preventDefault();
      this.$emit('close', {
        event: event,
        target: this
      });
    },
    handleKeyDown: function handleKeyDown(event) {
      if (event.keyCode === Keys.esc && hasListener.call(this, 'close')) {
        event.preventDefault();
        this.handleCloseDialog(event);
      }
    },
    transformDimesion: function transformDimesion(initialValue) {
      return typeof initialValue === 'string' ? initialValue.endsWith('px') ? initialValue : initialValue + 'px' : initialValue + 'px';
    },
    getActionBarIndex: function getActionBarIndex(children) {
      var actionBarIndex = children.findIndex(function (child) {
        return child && child.tag && child.tag.toLowerCase().indexOf('dialogactionsbar') !== -1 || child.componentOptions && child.componentOptions.tag && child.componentOptions.tag.toLowerCase().indexOf('actions-bar') !== -1 || child.type && child.type.name && child.type.name.toLowerCase().indexOf('dialogactionsbar') !== -1;
      });
      return actionBarIndex;
    },
    generateTitleId: function generateTitleId() {
      return 'dialog-title' + guid();
    }
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var id = this.$props.id !== undefined ? this.$props.id : this.titleId;
    var _a = this.$props,
        title = _a.title,
        width = _a.width,
        height = _a.height,
        minWidth = _a.minWidth,
        dir = _a.dir,
        contentStyle = _a.contentStyle;
    var titleRender = this.$props.titleRender ? templateRendering.call(this, this.$props.titleRender, getListeners.call(this)) : null;
    var defaultSlot = getDefaultSlots(this);
    var content = defaultSlot || [];
    width = this.transformDimesion(width);
    height = this.transformDimesion(height);
    minWidth = this.transformDimesion(minWidth);
    var actionBarIndex = this.getActionBarIndex(content);
    var actions;

    if (actionBarIndex !== -1) {
      actions = content[actionBarIndex];
      content.splice(actionBarIndex, 1);
    }

    var closeIcon = this.$props.closeIcon !== undefined ? this.$props.closeIcon : true;
    return h("div", {
      "class": 'k-dialog-wrapper',
      onKeydown: this.handleKeyDown,
      on: this.v3 ? undefined : {
        "keydown": this.handleKeyDown
      },
      tabIndex: 0,
      attrs: this.v3 ? undefined : {
        tabIndex: 0,
        dir: dir
      },
      dir: dir
    }, [h("div", {
      "class": "k-overlay"
    }), h("div", {
      "aria-labelledby": title || titleRender ? id : undefined,
      attrs: this.v3 ? undefined : {
        "aria-labelledby": title || titleRender ? id : undefined,
        role: "dialog"
      },
      "class": "k-widget k-window k-dialog",
      role: "dialog",
      style: {
        width: width,
        height: height,
        minWidth: minWidth
      }
    }, [(title || titleRender) && // @ts-ignore
    h(DialogTitleBar, {
      closeIcon: closeIcon,
      attrs: this.v3 ? undefined : {
        closeIcon: closeIcon,
        id: id,
        title: title,
        titleRender: titleRender
      },
      onClosebuttonclick: this.handleCloseDialog,
      on: this.v3 ? undefined : {
        "closebuttonclick": this.handleCloseDialog
      },
      id: id,
      title: title,
      titleRender: titleRender
    }), h("div", {
      "class": "k-content k-window-content k-dialog-content",
      style: contentStyle
    }, [content]), actions])]);
  }
};
export { Dialog };